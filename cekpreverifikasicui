import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import psycopg2
import os
from pathlib import Path
import cv2
import imutils.paths as paths
import face_recognition
import pickle
import numpy as np

def create_foto():
    conopen = psycopg2.connect(database=dbname,
        user=username,
        password=passwd,
        host=srver,
        port=port
    )
    curopen = conopen.cursor()
    st = "Select r1eiiy, rtrim(h1emid) as emid, r1pict from hrmasr "
    st += "left join hrmas1 on h1eiiy = r1eiiy "
    print(st)
    curopen.execute(st)
    resopen = curopen.fetchall()
    countopen = len(resopen)
    print(countopen)
    nama = ""
    for i in range(countopen):
        if nama != resopen[i][1]:
            no = 1
            nama = resopen[i][1]
        else:
            no += 1
        if not os.path.exists("Data/" + resopen[i][1]):
            print(resopen[i][1])
            os.mkdir("Data/" + resopen[i][1])
        data = resopen[i][2]
        with open(f"Data/{resopen[i][1]}/{resopen[i][1]}_{str(no)}.jpg", 'wb') as out:
            out.write(data)
    conopen.close()

def process_faces():
    dataset = "D:/ExPy/finalKamisRizkal/Data"  # Lokasi folder dataset gambar
    pickle_file = "D:/ExPy/finalKamisRizkal/training/encoding1.pickle"  

    # Load existing pickle file if available
    if os.path.exists(pickle_file):
        with open(pickle_file, "rb") as f:
            data = pickle.load(f)
        knownEncodings = data["encodings"]
        knownNames = data["names"]
        print("[INFO] File pickle ditemukan, memuat data lama...")
    else:
        knownEncodings = []
        knownNames = []
        print("[INFO] File pickle belum ada, membuat data baru...")

    imagePaths = list(paths.list_images(dataset))
    newImagePaths = []

    # Hanya tambahkan gambar baru yang belum diproses sebelumnya
    for imagePath in imagePaths:
        name = imagePath.split(os.path.sep)[-2]  # Nama folder = label
        if name not in knownNames:
            newImagePaths.append(imagePath)

    print(f"[INFO] Menemukan {len(newImagePaths)} gambar baru untuk diproses.")

    for (i, imagePath) in enumerate(newImagePaths):
        print(f"[INFO] Memproses gambar {i+1}/{len(newImagePaths)}: {imagePath}")
        name = imagePath.split(os.path.sep)[-2]  
        image = cv2.imread(imagePath)
        rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        boxes = face_recognition.face_locations(rgb, model="hog")
        encodings = face_recognition.face_encodings(rgb, boxes)

        for encoding in encodings:
            knownEncodings.append(encoding)
            knownNames.append(name)

    # Simpan hanya encoding baru ke file pickle
    print("[INFO] Menyimpan data terbaru ke file pickle...")
    with open(pickle_file, "wb") as f:
        pickle.dump({"encodings": knownEncodings, "names": knownNames}, f)

    print("[INFO] Update file pickle selesai!")

dbname = "backupabsen"
username="postgres"
passwd="admin"
srver="localhost"
port="5432" 

window = tk.Tk()
screnwidth = 600 
screnheight = 480
window.geometry(f"{screnwidth}x{screnheight}+0+0")
window.title('PRE VERIFIKASI ABSENSI')
window.resizable(0,0)

for i in range(0,19):
    window.columnconfigure(i, weight=1, minsize=int(screnwidth/20))

for i in range(0,19):
    window.rowconfigure(i, minsize=int(screnheight/25))

btn_foto = tk.Button(window, text="Ambil Foto dari Database", command=create_foto)
btn_foto.grid(row=1, column=1, columnspan=3, padx=15, sticky="w")

btn_recognition = tk.Button(window, text="Proses Pengenalan Wajah", command=process_faces)
btn_recognition.grid(row=2, column=1, columnspan=3, padx=15, sticky="w")

if not os.path.exists("foto"):
    print("Tidak ada")
    os.mkdir("foto")

window.mainloop()
